import { readFile } from 'node:fs/promises';
import { createReadStream } from 'node:fs';
import { URL } from 'node:url';
import { env } from 'node:process';
import { Client } from 'tumblr.js';
import { assert } from 'chai';
import { test } from 'mocha';

describe('oauth1 write requests', () => {
  /** @type {import('tumblr.js').Client} */
  let client;

  /** @type {string} */
  let blogName;

  before(async function () {
    if (
      !env['TUMBLR_OAUTH_CONSUMER_KEY'] ||
      !env['TUMBLR_OAUTH_CONSUMER_SECRET'] ||
      !env['TUMBLR_OAUTH_TOKEN'] ||
      !env['TUMBLR_OAUTH_TOKEN_SECRET']
    ) {
      console.log('Must provide all Oauth1 environment variables');
      this.skip();
    }

    if (!env['CI']) {
      console.warn(
        'This test suite uses the API to make changes. Modify the test suite to enabled it.',
      );
      this.skip();
    }

    client = new Client({
      consumer_key: env['TUMBLR_OAUTH_CONSUMER_KEY'],
      consumer_secret: env['TUMBLR_OAUTH_CONSUMER_SECRET'],
      token: env['TUMBLR_OAUTH_TOKEN'],
      token_secret: env['TUMBLR_OAUTH_TOKEN_SECRET'],
    });

    const userResp = await client.userInfo();
    blogName = userResp.user.blogs[0].name;
  });

  // Wait a bit between tests to not spam API.
  afterEach(function () {
    return new Promise((resolve) =>
      setTimeout(() => resolve(undefined), Math.min(this.timeout() - 100, 1_000)),
    );
  });

  describe('post creation and edition', () => {
    /** @type {string|undefined} */
    let createdPostId;

    const postContent = /** @type {const} */ ([
      {
        type: 'text',
        text: `Automated test post ${new Date().toISOString()}`,
      },
      {
        type: 'text',
        text: 'This post was automatically generated by the tumblr.js tests.',
      },
      {
        type: 'link',
        title: 'The official JavaScript client library for the Tumblr API.',
        url: 'https://github.com/tumblr/tumblr.js',
        author: 'Tumblr',
      },
    ]);

    test('creates a simple post', async () => {
      const res = await client.createPost(blogName, {
        content: postContent,
        tags: ['tumblr.js-test', `tumblr.js-version-${client.version}`, 'test-npf'],
      });
      assert.isOk(res);
      assert.isString(res.id);
      createdPostId = res.id;
    });

    test('edits the post', async function () {
      if (!createdPostId) {
        this.skip();
      }

      assert.isOk(
        await client.editPost(blogName, createdPostId, {
          content: [...postContent, { type: 'text', text: 'This block was appended in an edit.' }],
          tags: [
            'tumblr.js-test',
            `tumblr.js-version-${client.version}`,
            'test-npf',
            'test-npf-edit',
          ],
        }),
      );
    });

    test('creates a post with existing media', async () => {
      const media = {
        media_key: '9fb3517d95570cbd752caa77172f1ebb:60e936a44dbb258b-12',
        type: 'image/jpeg',
        width: 400,
        height: 108,
        url: 'https://64.media.tumblr.com/9fb3517d95570cbd752caa77172f1ebb/60e936a44dbb258b-12/s400x600/27f27482d8c9c631a05f478107976a0aeda2c9a5.jpg',
        has_original_dimensions: true,
      };

      assert.isOk(
        await client.createPost(blogName, {
          content: [
            ...postContent,
            {
              type: 'image',
              media,
              caption: 'Arches National Park',
              alt_text: 'A mountain landsacpe',
              attribution: {
                type: 'link',
                url: 'https://openverse.org/image/38b9b781-390f-4fc4-929d-0ecb4a2985e3',
              },
            },
          ],

          tags: [
            'tumblr.js-test',
            `tumblr.js-version-${client.version}`,
            'test-npf',
            'test-npf-media',
          ],
        }),
      );
    });

    test('creates a post with media upload', async () => {
      assert.isOk(
        await client.createPost(blogName, {
          content: [
            ...postContent,
            {
              type: 'image',
              media: createReadStream(new URL('../test/fixtures/image.jpg', import.meta.url)),
              caption: 'Arches National Park',
              alt_text: 'A mountain landsacpe',
              attribution: {
                type: 'link',
                url: 'https://openverse.org/image/38b9b781-390f-4fc4-929d-0ecb4a2985e3',
              },
            },
            {
              type: 'video',
              media: createReadStream(new URL('../test/fixtures/video.mp4', import.meta.url)),
              width: 92,
              height: 69,
              title:
                'Phosphatidylinositol (4,5) Bisphosphate Controls T Cell Activation by Regulating T Cell Rigidity and Organization',
              attribution: {
                type: 'link',
                url: 'https://commons.wikimedia.org/wiki/File:Phosphatidylinositol-(45)-Bisphosphate-Controls-T-Cell-Activation-by-Regulating-T-Cell-Rigidity-and-pone.0027227.s020.ogv',
              },
            },
          ],

          tags: [
            'tumblr.js-test',
            `tumblr.js-version-${client.version}`,
            'test-npf',
            'test-npf-media-upload',
          ],
        }),
      );
    });
  });

  describe('legacy post creation', () => {
    test('creates a text post', async () => {
      assert.isOk(
        await client.createLegacyPost(blogName, {
          type: 'text',
          format: 'markdown',
          title: `Automated test post ${new Date().toISOString()}`,
          body: 'This post was automatically generated by the tumblr.js tests.\n\n[The official JavaScript client library for the Tumblr API.](https://github.com/tumblr/tumblr.js)',
          tags: `tumblr.js-test,tumblr.js-version-${client.version},test-legacy-text`,
        }),
      );
    });

    describe('create photo post', () => {
      it('via data', async () => {
        const data = createReadStream(new URL('../test/fixtures/image.jpg', import.meta.url));

        const res = await client.createLegacyPost(blogName, {
          type: 'photo',
          caption: `Arches National Park || Automated test post ${new Date().toISOString()}`,
          link: 'https://openverse.org/image/38b9b781-390f-4fc4-929d-0ecb4a2985e3',
          tags: `tumblr.js-test,tumblr.js-version-${client.version},test-legacy-photo-data`,
          data: data,
        });
        assert.isOk(res);
      });

      it('via data[]', async () => {
        const data = createReadStream(new URL('../test/fixtures/image.jpg', import.meta.url));

        const res = await client.createLegacyPost(blogName, {
          type: 'photo',
          caption: `Arches National Park || Automated test post ${new Date().toISOString()}`,
          link: 'https://openverse.org/image/38b9b781-390f-4fc4-929d-0ecb4a2985e3',
          tags: `tumblr.js-test,tumblr.js-version-${client.version},test-legacy-photo-data[]`,
          data: [data, data],
        });
        assert.isOk(res);
      });

      it('via data64', async () => {
        const data = await readFile(new URL('../test/fixtures/image.jpg', import.meta.url), {
          encoding: 'base64',
        });

        const res = await client.createLegacyPost(blogName, {
          type: 'photo',
          caption: `Arches National Park || Automated test post ${new Date().toISOString()}`,
          link: 'https://openverse.org/image/38b9b781-390f-4fc4-929d-0ecb4a2985e3',
          tags: `tumblr.js-test,tumblr.js-version-${client.version},test-legacy-photo-data64`,
          data64: data,
        });
        assert.isOk(res);
      });
    });

    it('creates an audio post with data', async () => {
      const data = createReadStream(new URL('../test/fixtures/audio.mp3', import.meta.url));

      const res = await client.createLegacyPost(blogName, {
        type: 'audio',
        caption: `Multiple Dog Barks (King Charles Spaniel) || Automated test post ${new Date().toISOString()}`,
        tags: `tumblr.js-test,tumblr.js-version-${client.version},test-legacy-audio`,
        data: data,
      });
      assert.isOk(res);
    });
  });
});
